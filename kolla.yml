---
- hosts: build
  gather_facts: false
  become: true
  become_user: root
  tasks:
  - raw: apt-get install python -y
    ignore_errors: true

- hosts: build
  become: true
  become_user: root
  vars:
    net_0: 10.10.10.0/24
    vld: /var/lib/docker
    domain: opsits.com
    index: 1
    pub_int: enp0s8
    ext_int: enp0s9
    br_int: br0
  pre_tasks:
  - name: install system specific packages
    include: debian.yml
    when: ansible_os_family == "Debian"
  - name: install RedHat specific packages
    include: redhat.yml
    when: ansible_os_family == "RedHat"
  tasks:
  - name: deploy wily resources
    include: wily.yml
    when: ansible_os_family == "Debian" and not ansible_lsb.codename == "xenial"
  - name: add ssh public key
    authorized_key: user=root key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  - name: update ssh config
    copy: src=ssh_config dest=/root/.ssh/config mode=0644
  - name: install docker from upstream
    shell: curl -sSL https://get.docker.io | bash creates=/etc/docker/key.json
  - name: ensure docker is running
    service: name=docker state=started enabled=true
  - name: Install pip based docker-py module
    pip: name=docker-py

  - name: check for veth interface
    command: ip -d link
    register: veth_info
    ignore_errors: true
  - name: create veth interface
    command: ip link add veth0 type veth peer name veth1
    when: not (veth_info.stdout | search('veth0'))
  - name: add '{{br_int}}'
    command: brctl addbr '{{br_int}}'
    when: not (veth_info.stdout | search('veth0'))
  - name: add ext_int to '{{br_int}}'
    command: brctl addif '{{br_int}}' '{{ext_int}}'
    when: not (veth_info.stdout | search('veth0'))
  - name: add veth1 to '{{br_int}}'
    command: brctl addif '{{br_int}}' veth1
    when: not (veth_info.stdout | search('veth0'))
  - name: bring up links
    command: ip link set "{{item}}" up
    with_items:
       - "{{pub_int}}"
       - "{{ext_int}}"
       - veth0
       - veth1
       - "{{br_int}}"
  - name: re-discover address on interfaces
    command: dhclient "{{item}}"
    with_items:
      - "{{br_int}}"
      - "{{pub_int}}"
    when: not (veth_info.stdout | search('veth0'))



  - name: Install ansible version 2.0 or greater
    pip: name=ansible state=latest
  - name: clone kolla
    git: repo=https://git.openstack.org/openstack/kolla dest=/root/kolla version=stable/mitaka
    ignore_errors: true
  - name: install kolla elements
    pip: name=kolla/ chdir=/root
  - name: update the /etc/kolla directory
    command: cp -r etc/kolla /etc
    args:
      chdir: /root/kolla
      creates: /etc/kolla

  - name: restart docker
    service: name=docker state=restarted
  - name: create systemd docker service directory
    file: dest=/etc/systemd/system/docker.service.d state=directory
  - name: create docker service conf file
    copy: src=./kolla.conf dest=/etc/systemd/system/docker.service.d/kolla.conf
  - name: restart daemons
    command: systemctl daemon-reload
  - name: restart docker service
    service: name=docker state=restarted

## Update the /etc/kolla/globals.yml based on the environment
  - name: ensure base is ubuntu
    lineinfile: 'dest=/etc/kolla/globals.yml regexp=^.*kolla_base_distro.* line="kolla_base_distro: ubuntu"'
  - name: ensure install type is source
    lineinfile: 'dest=/etc/kolla/globals.yml regexp=^.*kolla_install_type.* line="kolla_install_type: source"'
  - set_fact:
      net_0_ip: "{{ net_0 |ipaddr('net')|ipaddr(index)}}"
      vip_net: "{{ansible_default_ipv4.network}}/{{ansible_default_ipv4.netmask}}"
  - set_fact:
      vip_ip:  "{{vip_net|ipaddr('net')|ipaddr('-2')|ipaddr('address')}}"
  - name: set the default internal VIP address
    lineinfile: "dest=/etc/kolla/globals.yml regexp=^kolla_internal_vip_address.* line='kolla_internal_vip_address: {{vip_ip}}'"
  - name: set the docker network interface
    lineinfile: "dest=/etc/kolla/globals.yml regexp=^.*network_interface:.* line='network_interface: {{pub_int}}'"
  - name: set the docker network interface
    lineinfile: "dest=/etc/kolla/globals.yml regexp=^.*neutron_external_interface:.* line='neutron_external_interface: veth0'"
  - name: set the docker network interface
    lineinfile: "dest=/etc/kolla/globals.yml regexp=^.*neutron_plugin_agent:.* line='neutron_plugin_agent: linuxbridge'"


## Build the images
  - name: run kolla build to build source based images
    shell: 'kolla-build --type source --base ubuntu |& /var/log/kolla-build.log'
    args:
      creates: /var/log/kolla-build.log
      executable: /bin/bash
    async: 60
    poll: 0
    register: kolla_build
    ignore_errors: true
  - debug: msg="Run this kolla-build --type source --base ubuntu"
## Ensure DNS is configured
  - name: update resolv.conf with domain
    lineinfile: dest=/etc/resolv.conf backrefs=yes regexp=^search(.*) line='search \1 {{domain}}'
## create and upload an SSH pair
  - name: ensure ssh directory exists
    file: path=~/.ssh state=directory mode=0700
  - name: create ssh keypair
    command: ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa creates=~/.ssh/id_rsa
  - name: copy id_rsa to ssh directory
    fetch: src=~/.ssh/id_rsa dest=./ flat=yes
  - name: fetch the public key
    fetch: src=~/.ssh/id_rsa.pub dest=./ flat=yes
  - name: check on kolla-build process
    async_status: "jid={{ kolla_build.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: 600
  - name: generate passwords
    command: kolla-genpwd creates=/etc/kolla/passwords.yml
  - name: update keystone_admin_password
    lineinfile: >
     src=/etc/kolla/passwords.yml 
     line='keystone_admin_password: openstack' 
